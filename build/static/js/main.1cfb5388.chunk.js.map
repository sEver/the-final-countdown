{"version":3,"sources":["Timer.js","Background.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","timeLeftArray","getCurrentTimeMilliseconds","Date","getTime","componentDidMount","interval","setInterval","cycleSecond","millisecondsLeft","showdownMilliseconds","getTimeLeftArray","setState","render","className","renderDigits","parse","until","console","log","clearInterval","this","timerDays","Math","floor","secondsInADay","timerTime","result","getHours","getMinutes","getSeconds","map","element","padStart","class","value","React","Component","Background","renderArtifacts","n","push","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAEqBA,G,wDAInB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAJRC,MAAQ,CACNC,cAAe,IAEE,EAMnBC,2BAA6B,WAC3B,OAAO,IAAIC,MAAOC,WAPD,EAUnBC,kBAAoB,WAClB,EAAKC,SAAWC,YAAY,EAAKC,YAAa,MAX7B,EAcnBA,YAAc,WACZ,IAAIC,EACF,EAAKC,qBAAuB,EAAKR,6BAC/BD,EAAgB,EAAKU,iBAAiBF,GAE1C,EAAKG,SAAS,CACZH,mBACAR,mBArBe,EAiEnBY,OAAS,WACP,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,gBAAf,iCACA,yBAAKA,UAAU,iBAAiB,EAAKC,kBAnEzC,EAAKL,qBAAuBP,KAAKa,MAAMjB,EAAMkB,OAC7CC,QAAQC,IAAI,gBAAiB,EAAKT,sBAHjB,E,mEA0BjBU,cAAcC,KAAKf,Y,uCAGJG,GACf,IAQIa,EAAYC,KAAKC,MAAMf,EAFAgB,OAGvBC,EAAY,IAAIvB,KAAKM,EAHEgB,OAIvBE,EAAS,CACXL,EACAI,EAAUE,WACVF,EAAUG,aACVH,EAAUI,cAKZ,OAHAH,EAASA,EAAOI,KAAI,SAACC,GAAD,OAAc,GAAKA,GAASC,SAAS,EAAG,QAC5Df,QAAQC,IAAIQ,GAELA,I,qCAIP,OAAIN,KAAKrB,MAAMS,iBAAmB,EACzB,0BAAMyB,MAAM,YAAZ,8BAGP,oCACGb,KAAKrB,MAAMC,cAAc8B,KAAI,SAACI,GAAD,OAC5B,8BAAOA,W,GA/DkBC,IAAMC,YCApBC,G,kNACnBC,gBAAkB,WAGhB,IAFA,IAAIC,EAAI,GACJb,EAAS,GACNa,KACLb,EAAOc,KAAK,yBAAK3B,UAAU,cAI7B,OAFAa,EAAOc,KAAK,yBAAK3B,UAAU,SAEpBa,G,EAETd,OAAS,WACP,OAAO,yBAAKC,UAAU,cAAc,EAAKyB,oB,YAZLH,IAAMC,Y,MCY/BK,MATf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOG,MAAM,0BCGC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASnC,OACP,kBAAC,IAAMoC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.1cfb5388.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Timer.scss\";\r\nexport default class Timer extends React.Component {\r\n  state = {\r\n    timeLeftArray: [],\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.showdownMilliseconds = Date.parse(props.until);\r\n    console.log(\"Showdown at: \", this.showdownMilliseconds);\r\n  }\r\n\r\n  getCurrentTimeMilliseconds = () => {\r\n    return new Date().getTime();\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.interval = setInterval(this.cycleSecond, 1000);\r\n  };\r\n\r\n  cycleSecond = () => {\r\n    let millisecondsLeft =\r\n      this.showdownMilliseconds - this.getCurrentTimeMilliseconds();\r\n    let timeLeftArray = this.getTimeLeftArray(millisecondsLeft);\r\n\r\n    this.setState({\r\n      millisecondsLeft,\r\n      timeLeftArray,\r\n    });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  getTimeLeftArray(millisecondsLeft) {\r\n    const millisecondsInASecond = 1000;\r\n    const secondsInAMinute = 60;\r\n    const minutesInAnHour = 60;\r\n    const hoursInADay = 24;\r\n    const secondsInAnHour = secondsInAMinute * minutesInAnHour;\r\n    const secondsInADay = hoursInADay * secondsInAnHour;\r\n    const millisecondsInADay = secondsInADay * millisecondsInASecond;\r\n\r\n    let timerDays = Math.floor(millisecondsLeft / millisecondsInADay);\r\n    let timerTime = new Date(millisecondsLeft % millisecondsInADay);\r\n    let result = [\r\n      timerDays,\r\n      timerTime.getHours(),\r\n      timerTime.getMinutes(),\r\n      timerTime.getSeconds(),\r\n    ];\r\n    result = result.map((element) => (\"\" + element).padStart(2, \"0\"));\r\n    console.log(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  renderDigits() {\r\n    if (this.state.millisecondsLeft < 0) {\r\n      return <span class=\"showdown\">To już. Gratulacje!!!</span>;\r\n    }\r\n    return (\r\n      <>\r\n        {this.state.timeLeftArray.map((value) => (\r\n          <span>{value}</span>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"timer\">\r\n        <div className=\"timer__title\">Czas, który pozostał:</div>\r\n        <div className=\"timer__digits\">{this.renderDigits()}</div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport \"./Background.scss\";\r\nexport default class Background extends React.Component {\r\n  renderArtifacts = () => {\r\n    let n = 10;\r\n    let result = [];\r\n    while (n--) {\r\n      result.push(<div className=\"artifact\"></div>);\r\n    }\r\n    result.push(<div className=\"sun\"></div>);\r\n\r\n    return result;\r\n  };\r\n  render = () => {\r\n    return <div className=\"background\">{this.renderArtifacts()}</div>;\r\n  };\r\n}\r\n","import React from \"react\";\nimport Timer from \"./Timer\";\nimport Background from \"./Background\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Background />\n      <Timer until=\"2020-09-01T15:00:00\"></Timer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}